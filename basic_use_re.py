# reモジュールの基本的な使い方

# reモジュールをインポート
import re

# re.search()関数で、第2引数の文字列が第1引数の正規表現にマッチするかどうかをテストする
# マッチする場合はMatchオブジェクトが得られ、マッチしない場合はNoneが得られる
# 次の例ではMatchオブジェクトが得られ、match='abc'でabcの部分にマッチしたことがわかる
re.search(r'a.*c' , 'abc123DEF')

# 次の例では、正規表現にマッチしないのでNoneが得られる
# この場合インタラクティブシェルでは結果が何も表示されない
re.search(r'a.*d' , 'abc123DEF')

# 第3引数にオプションを指定できる
# re.IGNORECASE(またはre.I)を指定すると大文字小文字の違いが無視されるため、マッチするようになる
# 他にも . が改行を含むすべての文字にマッチするようになる tr.DOTALL(またはre.S)などがある
re.search(r'a.*d' , 'abc123DEF', re.IGNORECASE)

# Matchオブジェクトのgroup()メソッドでマッチした値を取得できる
# 引数に0を指定すると、正規表現全体にマッチした値が得られる
m = re.search(r'a(.*)c', 'abc123DEF')
m.group(0)

# 引数に1以上の数値を指定すると、正規表現の()で囲った部分(キャプチャ)にマッチした値を取得できる
# 1なら1番目のキャプチャに、2なら2番目のキャプチャにマッチした値が得られる
m.group(1)

# re.findall()関数を使うと正規表現にマッチする全ての箇所を取得できる
# 次の例では、2文字以上の単語を全て抽出している
# \w はUnicodeで単語の一部になりえる文字にマッチする
# 他にも空白文字にマッチする \s などがある
re.findall(r'\w{2,}', 'This is a pen')

# re,sub()関数を使うと、正規表現にマッチする箇所を置換できる
# 第3引数の文字列の中で、第1引数の正規表現にマッチする箇所(次の例では2文字以上の単語)すべてを、
# 第2引数の文字列に置換した文字列を取得する
re.sub(r'\w{2,}', 'That', 'This is a pen')

# search()は文字列の途中からでもマッチする
re.search(r'B.*', 'ABC')

# match()は文字列の途中からはマッチしない
re.match(r'B.*', 'ABC')

# match()は文字列の戦闘からしかマッチしない
re.match(r'A.*', 'ABC')